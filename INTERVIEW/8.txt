8. How do you handle events in a React component?

A. Handling events in a React component involves attaching event listeners to elements and defining methods that will be called when the events are triggered.
 React's event handling system is similar to that of HTML but with some syntactic differences and improvements.
 *Event Handling with Arguments:
To pass arguments to an event handler, you can use an "arrow function" or the "bind method".

* Common Event Types:
1. Mouse Events: onClick, onDoubleClick, onMouseEnter, onMouseLeave, etc.
2. Form Events: onChange, onSubmit, onFocus, onBlur, etc.
3. Keyboard Events: onKeyDown, onKeyPress, onKeyUp, etc.
4. Window Events: onScroll, onResize, etc.
* Preventing Default Behavior:
You can prevent the default behavior of an event using "event.preventDefault()".
* Event Pooling:
React uses a synthetic event system for better performance and cross-browser compatibility. 
Synthetic events are reused across different events for efficiency.
 If you need to access the event properties asynchronously, you should call "event.persist()".
 * Combining State and Event Handling:
    you'll need to handle events and update the component's state.
    