14. How do you use React Router for client-side routing?

A. React Router is a popular library for handling client-side routing in React applications. 
It allows you to navigate between different components or views in your application without requiring a full page reload. 
Here's a guide on how to set up and use React Router for client-side routing.

* Setting Up React Router:
1. Install React Router:
First, you need to install the React Router library using npm or yarn.

* Key Concepts in React Router:
1. Router: The Router component (e.g., BrowserRouter) provides the routing functionality. It must be at the top level of your component tree.

2. Route: The Route component is used to define a path and the component to render when the path matches the current URL. It has path and component props.

3. Switch: The Switch component renders the first Route that matches the current URL. It ensures that only one route is rendered at a time.

4. Link: The Link component is used to create navigable links in your application. It updates the URL without reloading the page.

5. exact: The exact prop is used with Route to ensure that it only matches the URL exactly. Without exact, the route will match any URL that starts with the given path.

* Advanced Usage:
1. Nested Routes:
You can nest routes to create more complex routing structures.

2. Route Parameters:
You can use route parameters to pass data through the URL.

3. Redirects:
You can redirect from one route to another using the Redirect component.

4. Protected Routes:
You can create protected routes that require authentication.

* By integrating React Router into your React application, you can manage navigation and rendering of different views effectively,
 making your application more dynamic and user-friendly.






